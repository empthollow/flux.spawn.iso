#!/bin/bash

set -e 
START=$(date +%s);
out_dir=/home/empthollow/FluxImages
revisionn=$(ls $out_dir | cut -c 16-17 | tail -1)
revision=$(($revisionn + 1))
if [ "$revision" -lt "10" ]; then
	revision=0$revision
else
	revision=$revision
fi
iso_name=fluxcapacity
iso_label="FluxCapacity"
iso_version=9.$revision
install_dir=flux
work_dir=work

case $1 in
	i686	)	arch=i686 ;;
	x86_64	)	arch=x86_64 ;;
	*	)	arch=$(uname -m) ;;
esac
sed -i s/arch\=.*/arch\=$arch/ $(which mkarchiso)
sed -i s/^Architecture.*/Architecture=$arch/ pacman.conf

script_path=$(readlink -f ${0%/*})

# Helper function to run make_*() only one time per architecture.
run_once() {
    if [[ ! -e ${work_dir}/build.${1}_${arch} ]]; then
        $1
        touch ${work_dir}/build.${1}_${arch}
    fi
}

# Base installation (airootfs)
make_basefs() {
    mkarchiso -v -C pacman.conf -w "${work_dir}" -D "${install_dir}" init
    mkarchiso -v -C pacman.conf -w "${work_dir}" -D "${install_dir}" -p "$(cat packages.list)" install
    cp packages.list overlay/etc
    cp -rd overlay/* "${work_dir}"/airootfs/
    tar -czf work/airootfs/etc/overlay.tar.gz overlay
    echo "localgen"
if [ -n "$(mount | grep airootfs)" ]; then
    umount -l work/airootfs/dev && umount -l work/airootfs ;
fi
    mkarchiso -v -w "${work_dir}" -D "${install_dir}" -r 'locale-gen' run
    cat ${work_dir}/airootfs/etc/group | grep -c flux > 1 || chroot ${work_dir}/airootfs useradd -u 1000 -g users -G storage,floppy,optical,audio,video,network,games,wheel,disk,vboxsf -m flux -p ""
    chroot ${work_dir}/airootfs chpasswd <<<"root:root"
echo "finished make_basefs: press enter"
}

# Copy mkinitcpio archiso hooks and build initramfs (airootfs)
make_setup_mkinitcpio() {
    mkdir -p ${work_dir}/airootfs/etc/initcpio/hooks
    mkdir -p ${work_dir}/airootfs/etc/initcpio/install
    cp /usr/lib/initcpio/hooks/archiso ${work_dir}/airootfs/etc/initcpio/hooks
    cp /usr/lib/initcpio/install/archiso ${work_dir}/airootfs/etc/initcpio/install
    cp /usr/lib/initcpio/hooks/archiso_loop_mnt ${work_dir}/airootfs/etc/initcpio/hooks
    cp /usr/lib/initcpio/install/archiso_loop_mnt ${work_dir}/airootfs/etc/initcpio/install
    cp ${script_path}/mkinitcpio.conf ${work_dir}/airootfs/etc/flux-mkinitcpio.conf
	mkarchiso -v -w "${work_dir}" -D "${install_dir}" -r 'mkinitcpio \
            -c /etc/flux-mkinitcpio.conf \
            -k $(pacman -Syi linux | grep Version | cut -c 18-26)-ARCH \
            -g /boot/fluxiso.img' run
echo "finished make_setup_mkinitcpio: press enter"
}

# Prepare ${install_dir}/boot/
make_boot() {
    mkdir -p ${work_dir}/iso/${install_dir}/boot/${arch}
    cp ${work_dir}/airootfs/boot/fluxiso.img ${work_dir}/iso/${install_dir}/boot/${arch}/fluxiso.img
    cp ${work_dir}/airootfs/boot/vmlinuz-linux ${work_dir}/iso/${install_dir}/boot/${arch}/vmlinuz
echo "finished make_boot: press enter"
}

# Prepare /${install_dir}/boot/syslinux
make_syslinux() {
    mkdir -p ${work_dir}/iso/${install_dir}/boot/syslinux
    sed "s|%ARCHISO_LABEL%|${iso_label}|g;
         s|%INSTALL_DIR%|${install_dir}|g;
         s|%ARCH%|${arch}|g" ${script_path}/syslinux/syslinux.cfg > ${work_dir}/iso/${install_dir}/boot/syslinux/syslinux.cfg
	cp ${work_dir}/airootfs/usr/lib/syslinux/bios/vesamenu.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp ${work_dir}/airootfs/usr/lib/syslinux/bios/reboot.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp ${work_dir}/airootfs/usr/lib/syslinux/bios/ldlinux.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp ${work_dir}/airootfs/usr/lib/syslinux/bios/libutil.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp ${work_dir}/airootfs/usr/lib/syslinux/bios/libcom32.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp syslinux/x86test ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp syslinux/memtest ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp syslinux/splash.png ${work_dir}/iso/${install_dir}/boot/syslinux/
echo "finished make_syslinux: press enter"
}

# Prepare /isolinux
make_isolinux() {
    mkdir -p ${work_dir}/iso/isolinux
    sed "s|%INSTALL_DIR%|${install_dir}|g" ${script_path}/isolinux/isolinux.cfg > ${work_dir}/iso/isolinux/isolinux.cfg
    cp ${work_dir}/airootfs/usr/lib/syslinux/bios/isolinux.bin ${work_dir}/iso/isolinux/
    cp ${work_dir}/airootfs/usr/lib/syslinux/bios/isohdpfx.bin ${work_dir}/iso/isolinux/
    cp ${work_dir}/airootfs/usr/lib/syslinux/bios/ldlinux.c32 ${work_dir}/iso/isolinux/
    cp ${work_dir}/airootfs/usr/lib/syslinux/bios/libutil.c32 ${work_dir}/iso/isolinux/
    cp ${work_dir}/airootfs/usr/lib/syslinux/bios/libcom32.c32 ${work_dir}/iso/isolinux/
echo "finished make_isolinux: press enter"    
}

# Process aitab
#make_aitab() {
#    sed "s|%ARCH%|${arch}|g" ${script_path}/aitab > ${work_dir}/iso/${install_dir}/aitab
#echo "finished make_aitab: press enter"    
#}

# Build all filesystem images specified in aitab (.fs.sfs .sfs)
make_prepare() {
    mkarchiso -v -w "${work_dir}" -D "${install_dir}" prepare
echo "finished make_prepare: press enter"    
}

# Build ISO
make_iso() {
#    mkarchiso -v -w "${work_dir}" -D "${install_dir}" checksum
    mkarchiso -v -w "${work_dir}" -D "${install_dir}" -L "${iso_label}" -o "${out_dir}" iso "${iso_name}-${iso_version}-${arch}.iso"
    chown 1000:1000 /home/empthollow/FluxImages/"${iso_name}-${iso_version}-${arch}.iso"
}

run_once make_basefs
run_once make_setup_mkinitcpio
run_once make_boot
run_once make_syslinux
run_once make_isolinux
#run_once make_aitab
run_once make_prepare
run_once make_iso
END=$(date +%s);
echo $((END-START)) | awk '{print int($1/60)":"int($1%60)}'
