#!/bin/bash

set -e -u
revisioni=10#$(ls out | grep -o [0-9].[0-9][0-9] | grep -o [0-9][0-9] | tail -1)
((revisioni++))
if [ "$revisioni" -lt "10" ]; then
	revision=0$revisioni
else
	revision=$revisioni
fi
iso_name=fluxcapacity
iso_label="FluxCapacity"
iso_version=7.$revision
install_dir=fluxstall
work_dir=work
out_dir=out
verbose="y"

case $1 in
	i686	)	arch=i686 ;;
	x86_64	)	arch=x86_64 ;;
	*	)	arch=$(uname -m) ;;
esac

script_path=$(readlink -f ${0%/*})

# Helper function to run make_*() only one time per architecture.
run_once() {
    if [[ ! -e ${work_dir}/build.${1}_${arch} ]]; then
        $1
        touch ${work_dir}/build.${1}_${arch}
    fi
}

# Base installation (root-image)
make_basefs() {
    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" init
#    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" -p "syslinux" create
#<<<<<<< HEAD
    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" -p "$(cat packages.list)" install
    cp packages.list overlay/etc
#=======
#    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" -p "$(cat packages.list)" install
#>>>>>>> 17773d996cd1ca901ba44183b4e367bec81438b4
    cp -rd overlay/* "${work_dir}"/root-image/
    tar -czf work/root-image/etc/overlay.tar.gz overlay
    mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" -r 'locale-gen' run
}

# Copy mkinitcpio archiso hooks (root-image)
make_setup_mkinitcpio() {
        cp /usr/lib/initcpio/hooks/archiso ${work_dir}/root-image/usr/lib/initcpio/hooks
        cp /usr/lib/initcpio/install/archiso ${work_dir}/root-image/usr/lib/initcpio/install
		cp /usr/lib/initcpio/install/archiso_loop_mnt ${work_dir}/root-image/usr/lib/initcpio/install/
		cp /usr/lib/initcpio/hooks/archiso_loop_mnt ${work_dir}/root-image/usr/lib/initcpio/hooks/
        cp ${script_path}/mkinitcpio.conf ${work_dir}/root-image/etc/flux-mkinitcpio.conf
		mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" -r \
        'mkinitcpio \
            -c /etc/flux-mkinitcpio.conf \
            -k $(pacman -Si linux | grep Version | cut -c 18-26)-ARCH \
            -g /boot/fluxiso.img' run
}

# Prepare ${install_dir}/boot/
make_boot() {
		pacman -Sy
        mkdir -p ${work_dir}/iso/${install_dir}/boot/${arch}
        cp ${work_dir}/root-image/boot/fluxiso.img ${work_dir}/iso/${install_dir}/boot/${arch}/fluxiso.img
        cp ${work_dir}/root-image/boot/vmlinuz-linux ${work_dir}/iso/${install_dir}/boot/${arch}/vmlinuz
}

# Prepare /${install_dir}/boot/syslinux
make_syslinux() {
        mkdir -p ${work_dir}/iso/${install_dir}/boot/syslinux
        sed "s|%ARCHISO_LABEL%|${iso_label}|g;
            s|%INSTALL_DIR%|${install_dir}|g;
            s|%ARCH%|${arch}|g" ${script_path}/syslinux/syslinux.cfg > ${work_dir}/iso/${install_dir}/boot/syslinux/syslinux.cfg
        cp ${work_dir}/root-image/usr/lib/syslinux/vesamenu.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp ${work_dir}/root-image/usr/lib/syslinux/reboot.c32 ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp syslinux/x86test ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp syslinux/memtest ${work_dir}/iso/${install_dir}/boot/syslinux/
	cp syslinux/splash.png ${work_dir}/iso/${install_dir}/boot/syslinux/
}

# Prepare /isolinux
make_isolinux() {
        mkdir -p ${work_dir}/iso/isolinux
        sed "s|%INSTALL_DIR%|${install_dir}|g" ${script_path}/isolinux/isolinux.cfg > ${work_dir}/iso/isolinux/isolinux.cfg
        cp ${work_dir}/root-image/usr/lib/syslinux/isolinux.bin ${work_dir}/iso/isolinux/
        cp ${work_dir}/root-image/usr/lib/syslinux/isohdpfx.bin ${work_dir}/iso/isolinux/
}

# Process aitab
make_aitab() {
        sed "s|%ARCH%|${arch}|g" ${script_path}/aitab > ${work_dir}/iso/${install_dir}/aitab
}

# Build all filesystem images specified in aitab (.fs .fs.sfs .sfs)
make_prepare() {
    mkarchiso ${verbose} -C pacman.conf -w "${work_dir}" -D "${install_dir}" prepare
}

# Build ISO
make_iso() {
    mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" checksum
    mkarchiso ${verbose} -w "${work_dir}" -D "${install_dir}" -L "${iso_label}" -o "${out_dir}" iso "${iso_name}-${iso_version}-${arch}.iso"
}

if [[ ${verbose} == "y" ]]; then
    verbose="-v"
else
    verbose=""
fi

run_once make_basefs
run_once make_setup_mkinitcpio
run_once make_boot
run_once make_syslinux
run_once make_isolinux
run_once make_aitab
run_once make_prepare
run_once make_iso
